<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiValidation.Archives.Text" xml:space="preserve">
    <value>档案</value>
  </data>
  <data name="ApiValidation.Categories.Text" xml:space="preserve">
    <value>分类</value>
  </data>
  <data name="ApiValidation.Database.Text" xml:space="preserve">
    <value>数据库</value>
  </data>
  <data name="ApiValidation.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>接受并继续</value>
  </data>
  <data name="ApiValidation.Dialog.SecondaryButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ApiValidation.Dialog.Title" xml:space="preserve">
    <value>API 验证</value>
  </data>
  <data name="ApiValidation.PassTests.Text" xml:space="preserve">
    <value>所选配置文件未通过以下一项或多项测试:</value>
  </data>
  <data name="ApiValidation.Terms.Text" xml:space="preserve">
    <value>如果您继续，您同意将不被提供支持，并且在会话期间将禁用错误报告.
任何崩溃、错误、错误或丢失数据均由网站而非应用程序引起.</value>
  </data>
  <data name="CategoryArchive.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="CategoryArchive.Search.PlaceholderText" xml:space="preserve">
    <value>搜索...</value>
  </data>
  <data name="ConfigureCategory.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ConfigureCategory.Content" xml:space="preserve">
    <value>静态类别使用固定的档案列表{0}动态类别使用搜索字符串动态填充列表</value>
  </data>
  <data name="ConfigureCategory.PrimaryButtonText" xml:space="preserve">
    <value>静态</value>
  </data>
  <data name="ConfigureCategory.SecondaryButtonText" xml:space="preserve">
    <value>动态</value>
  </data>
  <data name="ConfigureCategory.Title" xml:space="preserve">
    <value>选择分类方式</value>
  </data>
  <data name="CreateCategory.CategoryName.PlaceholderText" xml:space="preserve">
    <value>类别名称</value>
  </data>
  <data name="CreateCategory.Dialog.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="CreateCategory.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>添加</value>
  </data>
  <data name="CreateCategory.Dialog.Title" xml:space="preserve">
    <value>分类</value>
  </data>
  <data name="CreateCategory.ErrorName" xml:space="preserve">
    <value>空类别名</value>
  </data>
  <data name="CreateCategory.Pinned.Header" xml:space="preserve">
    <value>固定</value>
  </data>
  <data name="CreateCategory.SearchQuery.Header" xml:space="preserve">
    <value>为静态类别留空</value>
  </data>
  <data name="CreateCategory.SearchQuery.PlaceholderText" xml:space="preserve">
    <value>搜索队列</value>
  </data>
  <data name="CreateTankoubon.Dialog.CloseButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreateTankoubon.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="CreateTankoubon.Dialog.Title" xml:space="preserve">
    <value>Tankoubon</value>
  </data>
  <data name="CreateTankoubon.ErrorName" xml:space="preserve">
    <value>Empty tankoubon name</value>
  </data>
  <data name="CreateTankoubon.Name.PlaceholderText" xml:space="preserve">
    <value>Tankoubon Name</value>
  </data>
  <data name="OpenLink.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="OpenLink.PrimaryButtonText" xml:space="preserve">
    <value>在浏览器中打开</value>
  </data>
  <data name="OpenLink.SecondaryButtonText" xml:space="preserve">
    <value>复制到剪贴板</value>
  </data>
  <data name="OpenLink.Title" xml:space="preserve">
    <value>该应用程序正在尝试打开...</value>
  </data>
  <data name="ProgressConflict.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>继续</value>
  </data>
  <data name="ProgressConflict.Dialog.Title" xml:space="preserve">
    <value>存档进度</value>
  </data>
  <data name="ProgressConflict.Local" xml:space="preserve">
    <value>使用本地 ({0}/{1})</value>
  </data>
  <data name="ProgressConflict.Remote" xml:space="preserve">
    <value>使用远程 ({0}/{1})</value>
  </data>
  <data name="RemoveArchive.CloseButtonText" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="RemoveArchive.Content" xml:space="preserve">
    <value>你确定你要删除吗?</value>
  </data>
  <data name="RemoveArchive.PrimaryButtonText" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="RemoveArchive.Title" xml:space="preserve">
    <value>删除 {0}</value>
  </data>
  <data name="RemoveCategory.CloseButtonText" xml:space="preserve">
    <value>否</value>
  </data>
  <data name="RemoveCategory.Content" xml:space="preserve">
    <value>你确定你要删除吗?</value>
  </data>
  <data name="RemoveCategory.PrimaryButtonText" xml:space="preserve">
    <value>是</value>
  </data>
  <data name="RemoveCategory.Title" xml:space="preserve">
    <value>删除 {0}</value>
  </data>
  <data name="RemoveTankoubon.CloseButtonText" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="RemoveTankoubon.Content" xml:space="preserve">
    <value>Are you sure you want to delete it?</value>
  </data>
  <data name="RemoveTankoubon.PrimaryButtonText" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="RemoveTankoubon.Title" xml:space="preserve">
    <value>Delete {0}</value>
  </data>
  <data name="ServerProfile.Copy.ToolTipService.ToolTip" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="ServerProfile.Dialog.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ServerProfile.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>添加</value>
  </data>
  <data name="ServerProfile.Dialog.Title" xml:space="preserve">
    <value>服务器配置</value>
  </data>
  <data name="ServerProfile.ErrorInvalidAddress" xml:space="preserve">
    <value>服务器地址无效</value>
  </data>
  <data name="ServerProfile.ErrorLocalHost" xml:space="preserve">
    <value>您可能需要运行此命令以允许本地端口访问{0}之后重新启动应用</value>
  </data>
  <data name="ServerProfile.ErrorNoAddress" xml:space="preserve">
    <value>服务器地址为空</value>
  </data>
  <data name="ServerProfile.ErrorNoName" xml:space="preserve">
    <value>配置文件名称为空</value>
  </data>
  <data name="ServerProfile.ProfileAddress.PlaceholderText" xml:space="preserve">
    <value>服务器地址</value>
  </data>
  <data name="ServerProfile.ProfileApiKey.PlaceholderText" xml:space="preserve">
    <value>API 密钥</value>
  </data>
  <data name="ServerProfile.ProfileName.PlaceholderText" xml:space="preserve">
    <value>配置文件名</value>
  </data>
  <data name="ThumbnailPicker.Dialog.CloseButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ThumbnailPicker.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>应用</value>
  </data>
  <data name="ThumbnailPicker.Dialog.Title" xml:space="preserve">
    <value>选择缩略图</value>
  </data>
  <data name="UpdateCerts.CloseButtonText" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="UpdateCerts.Content" xml:space="preserve">
    <value>The app needs to update its code-signing certificates to keep receiving updates.
You can skip it, but it won't be able to install further updates.</value>
  </data>
  <data name="UpdateCerts.PrimaryButtonText" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UpdateCerts.Title" xml:space="preserve">
    <value>Update certificates</value>
  </data>
</root>