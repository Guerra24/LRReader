<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiValidation.Archives.Text" xml:space="preserve">
    <value>Archivos</value>
  </data>
  <data name="ApiValidation.Categories.Text" xml:space="preserve">
    <value>Categorías</value>
  </data>
  <data name="ApiValidation.Database.Text" xml:space="preserve">
    <value>Base de datos</value>
  </data>
  <data name="ApiValidation.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Aceptar y continuar</value>
  </data>
  <data name="ApiValidation.Dialog.SecondaryButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ApiValidation.Dialog.Title" xml:space="preserve">
    <value>Validación de la API</value>
  </data>
  <data name="ApiValidation.PassTests.Text" xml:space="preserve">
    <value>El perfil seleccionado no ha pasado una o más de las siguientes pruebas:</value>
  </data>
  <data name="ApiValidation.Terms.Text" xml:space="preserve">
    <value>Si continúas, aceptas que no se proporcionará asistencia y que los informes de errores estarán desactivados durante la sesión.
Cualquier crash, error o falta de datos es causado por el sitio web, NO por la aplicación.</value>
  </data>
  <data name="CategoryArchive.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Listo</value>
  </data>
  <data name="CategoryArchive.Search.PlaceholderText" xml:space="preserve">
    <value>Buscar...</value>
  </data>
  <data name="ConfigureCategory.CloseButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ConfigureCategory.Content" xml:space="preserve">
    <value>Una categoría estática utiliza una lista fija de archivos{0}Una categoría dinámica usa palabras claves para llenar la lista</value>
  </data>
  <data name="ConfigureCategory.PrimaryButtonText" xml:space="preserve">
    <value>Estática</value>
  </data>
  <data name="ConfigureCategory.SecondaryButtonText" xml:space="preserve">
    <value>Dinámica</value>
  </data>
  <data name="ConfigureCategory.Title" xml:space="preserve">
    <value>Modo</value>
  </data>
  <data name="CreateCategory.CategoryName.PlaceholderText" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="CreateCategory.Dialog.CloseButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="CreateCategory.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Agregar</value>
  </data>
  <data name="CreateCategory.Dialog.Title" xml:space="preserve">
    <value>Categoría</value>
  </data>
  <data name="CreateCategory.ErrorName" xml:space="preserve">
    <value>Nombre en blanco</value>
  </data>
  <data name="CreateCategory.Pinned.Header" xml:space="preserve">
    <value>Anclado</value>
  </data>
  <data name="CreateCategory.SearchQuery.Header" xml:space="preserve">
    <value>Dejar vacío para una categoría estática</value>
  </data>
  <data name="CreateCategory.SearchQuery.PlaceholderText" xml:space="preserve">
    <value>Texto a buscar</value>
  </data>
  <data name="CreateTankoubon.Dialog.CloseButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreateTankoubon.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="CreateTankoubon.Dialog.Title" xml:space="preserve">
    <value>Tankoubon</value>
  </data>
  <data name="CreateTankoubon.ErrorName" xml:space="preserve">
    <value>Empty tankoubon name</value>
  </data>
  <data name="CreateTankoubon.Name.PlaceholderText" xml:space="preserve">
    <value>Tankoubon Name</value>
  </data>
  <data name="OpenLink.CloseButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="OpenLink.PrimaryButtonText" xml:space="preserve">
    <value>Abrir en el navegador</value>
  </data>
  <data name="OpenLink.SecondaryButtonText" xml:space="preserve">
    <value>Copiar al portapapeles</value>
  </data>
  <data name="OpenLink.Title" xml:space="preserve">
    <value>La aplicación está tratando de abrir...</value>
  </data>
  <data name="ProgressConflict.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Continuar</value>
  </data>
  <data name="ProgressConflict.Dialog.Title" xml:space="preserve">
    <value>Progreso</value>
  </data>
  <data name="ProgressConflict.Local" xml:space="preserve">
    <value>Usar local ({0}/{1})</value>
  </data>
  <data name="ProgressConflict.Remote" xml:space="preserve">
    <value>Usar remoto ({0}/{1})</value>
  </data>
  <data name="RemoveArchive.CloseButtonText" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="RemoveArchive.Content" xml:space="preserve">
    <value>¿Estás seguro de que quieres eliminarlo?</value>
  </data>
  <data name="RemoveArchive.PrimaryButtonText" xml:space="preserve">
    <value>Si</value>
  </data>
  <data name="RemoveArchive.Title" xml:space="preserve">
    <value>Eliminar {0}</value>
  </data>
  <data name="RemoveCategory.CloseButtonText" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="RemoveCategory.Content" xml:space="preserve">
    <value>¿Estás seguro de que quieres eliminarla?</value>
  </data>
  <data name="RemoveCategory.PrimaryButtonText" xml:space="preserve">
    <value>Si</value>
  </data>
  <data name="RemoveCategory.Title" xml:space="preserve">
    <value>Eliminar {0}</value>
  </data>
  <data name="RemoveTankoubon.CloseButtonText" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="RemoveTankoubon.Content" xml:space="preserve">
    <value>Are you sure you want to delete it?</value>
  </data>
  <data name="RemoveTankoubon.PrimaryButtonText" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="RemoveTankoubon.Title" xml:space="preserve">
    <value>Delete {0}</value>
  </data>
  <data name="ServerProfile.Copy.ToolTipService.ToolTip" xml:space="preserve">
    <value>Copiar</value>
  </data>
  <data name="ServerProfile.Dialog.CloseButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ServerProfile.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Crear</value>
  </data>
  <data name="ServerProfile.Dialog.Title" xml:space="preserve">
    <value>Perfil de Servidor</value>
  </data>
  <data name="ServerProfile.ErrorInvalidAddress" xml:space="preserve">
    <value>Direccion Invalida</value>
  </data>
  <data name="ServerProfile.ErrorLocalHost" xml:space="preserve">
    <value>Puede que necesites ejecutar este comando para permitir el acceso local{0}Reiniciar la aplicación después</value>
  </data>
  <data name="ServerProfile.ErrorNoAddress" xml:space="preserve">
    <value>Direccion en blanco</value>
  </data>
  <data name="ServerProfile.ErrorNoName" xml:space="preserve">
    <value>Nombre en blanco</value>
  </data>
  <data name="ServerProfile.ProfileAddress.PlaceholderText" xml:space="preserve">
    <value>Direccion</value>
  </data>
  <data name="ServerProfile.ProfileApiKey.PlaceholderText" xml:space="preserve">
    <value>Clave</value>
  </data>
  <data name="ServerProfile.ProfileName.PlaceholderText" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="ThumbnailPicker.Dialog.CloseButtonText" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ThumbnailPicker.Dialog.PrimaryButtonText" xml:space="preserve">
    <value>Aplicar</value>
  </data>
  <data name="ThumbnailPicker.Dialog.Title" xml:space="preserve">
    <value>Selecciona una miniatura</value>
  </data>
</root>